csv notes

======================= reader ================================================================
import csv
import sys

with open(sys.argv[1], 'rt') as f:
    reader = csv.reader(f)
    for row in reader:
        print(row)
===============================================================================================
======================= writer ================================================================

csv_writer.py
import csv
import sys

unicode_chars = 'å∫ç'

with open(sys.argv[1], 'wt') as f:
    writer = csv.writer(f)
    writer.writerow(('Title 1', 'Title 2', 'Title 3', 'Title 4'))
    for i in range(3):
        row = (
            i + 1,
            chr(ord('a') + i),
            '08/{:02d}/07'.format(i + 1),
            unicode_chars[i],
        )
        writer.writerow(row)

print(open(sys.argv[1], 'rt').read())
===============================================================================================
======================= pipe vs comma =========================================================

If, instead of using commas to delimit fields, the input file uses pipes (|), like this

"Title 1"|"Title 2"|"Title 3"
1|"first line
second line"|08/18/07
a new dialect can be registered using the appropriate delimiter.

csv_dialect.py
import csv

csv.register_dialect('pipes', delimiter='|')

with open('testdata.pipes', 'r') as f:
    reader = csv.reader(f, dialect='pipes')
    for row in reader:
        print(row)
Using the “pipes” dialect, the file can be read just as with the comma-delimited file.

$ python3 csv_dialect.py

['Title 1', 'Title 2', 'Title 3']
['1', 'first line\nsecond line', '08/18/07']
===============================================================================================
=======================               =========================================================
